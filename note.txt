name: SmartNotes
username: smart_notes_sad_bot

Done! Congratulations on your new bot. You will find it at t.me/smart_notes_sad_bot. You can now add a description,
about section and profile picture for your bot, see /help for a list of commands. By the way, when you've finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.

Use this token to access the HTTP API:
6232371044:AAHSW_DC7exF2fV2sDdbK_JJoqzVelW5JAY
Keep your token secure and store it safely,
it can be used by anyone to control your bot.

--Разворачиваем RabbitMQ в Docker--
docker pull rabbitmq:3.11.0-management

Чтобы данные к контейнере сохранялись. Т.к при перезапуске системы данные из старого контейнера будут удалены.
Создаем временное хранилище volume куда будут сохранятся данные и которому потом будет подключаться докер
при перезапусках системы.
docker volume create rabbitmq_data

Запуск с параметрами:
-d запуск контейнера в фоновом режиме и вернет идентификатор контейнера в командную строку
--hostname rabbitmq позволяет подключиться к контейнеру извне с других контейнеров
--name rabbitmq задает имя контейнера
-p 5672:5672 задает порты. Причем слева от двоеточия это порт по которому будем подключаться снаружи.
Справа порт который используется внутри контейнера.
-p 15672:15672 порт вебинтерфейса rabbitmq.
-v c:\rabbitmq_data прикручивает volume т.е внешнее хранилище данных и путь до него.
--restart=unless-stopped rabbitmq:3.11.0-management - контейнер будет автоматически запускаться при запуске докера
независимо от того как он завершился (нормально или упал с ошибками).
docker run -d --hostname rabbitmq --name rabbitmq -p 5672:5672 -p 15672:15672 -v c:\rabbitmq_data --restart=unless-stopped rabbitmq:3.11.0-management

Вход в контейнер
docker exec -it rabbitmq /bin/bash

Добавляем user с именем admin и паролем admin
rabbitmqctl add_user root root

rabbitmqctl set_user_tags root administrator - типа присваиваем администратора
rabbitmqctl set_permissions -p / root ".*" ".*" ".*"  - даем права все

** Создание микросервиса Node**
На который в будущем будет нанизываться бизнес-логика.
Сейчас настроим пересылку ответов из Node через брокер в dispatcher и обратно в чат телеграма.

Что происходит:
В чат телеграма отправляем сообщение -> оно доставляется в диспатчер -> диспатчер передает в брокер -> брокер его пересылает в ноду
-> нода его получила и достала id чата и сформировала ответ с текстом Hello from node -> ответ передан в брокер -> брокер доставил в диспатчер ->
диспатчер передал в чат.

Подключаем Postgres через докер.
docker run -d --hostname postgresdatabase --name postgresdatabase -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root -e POSTGRES_DB=postgresdatabase -v c:\postgres_data --restart=unless-stopped postgres:14.5
-- hostname - имя для подключения к этому контейнеру из других контейнеров.

Тестовый запрос при подключении к БД
create table test_table(
  "name" text
);

Type jsonb - это такой тип для сохранения объекта в бд в виде не json а jsonb.
jsonb - по этому json можно навигироваться при помощи специальных запросов.
Для подключения необходима  <!-- Для сохранения в бд jsonb -->
                                   <dependency>
                                       <groupId>com.vladmihalcea</groupId>
                                       <artifactId>hibernate-types-52</artifactId>
                                       <version>2.2.2</version>
                                   </dependency>

Создаем репозиторий и сервис.
 Проблема с аннотацией @Data состоит в том, что она генерит equals и hashcode по всем полям.
 А у нас ид присваевается только когда сущность сохраняется в бд и можетбыть некорретный хэш от этого.







